In this exercise you will implement Conway's game of life.
It is a simulation of cellular automata, you can read more about it here: https://en.wikipedia.org/wiki/Conway's_Game_of_Life
There are various implementations of it online you can use as reference.

Implement a chardev such that:
1) The file will show up in `/dev` as a file named `game_of_life`.
2) The file will be owned by user `root` and group `root`.
3) The permissions for the file will be rw-rw-rw-.
4) All operations return -ENOMEM in case of memory allocation errors and
    -EINVAL when provided pointers to bad memory (if they are relevant to the operation).

The game will contain a 16x32 (16 rows, 32 cols) grid.
Coordinate (0,0) should be the upper-left corner, and (15,31) the bottom-right corner.
The first entry in the coordinate is the row, and the second is the column.

The basic rules of the game are:
1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.
2. Any live cell with two or three live neighbours lives on to the next generation.
3. Any live cell with more than three live neighbours dies, as if by overpopulation.
4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.

Notice that since the grid is finite, all of the liveness calculations should be modulo the grid dimensions.
For example, if a cell is at coordinates (0,0), its neighbors are: (1,0), (0,1), (1,1), (15,0), (0,31), (15,1), (1,31), (15,31).

The grid should be printed using ascii characters as such (this grid is not to scale):
---------------
|**         **|
|    ***      |
|   **  **    |
|    ***      |
---------------

The borders are dashes (-) and pipes (|), by default, an asterisk (*) denotes a live cell and a space denotes a dead one.
The character that denotes a live cell can be changed by the user.

Syscalls specification -

Return values for all operations:
1) Non-negative integer in case of success.
2) Specified errno in case of failure. If an appropriate errno was not explicitly specified, choose one.

open - Creates an empty grid. Only one grid can be active at a time,
so calling open again without closing should return an error (EBUSY).
The other arguments are not used.
Return value in case of success: file descriptor (note that this is a non-negative integer).

read - Returns the current grid.
The count argument is not used, since the entire grid should be returned.
After read, file offset (seek pointer) should always be cell (0,0).
It is the user's responsibility to send an appropriately sized buffer.

write - Toggles the cell currently at the seek point (dead to alive or vice versa). The buf and count arguments aren't used.
Write interacts with file offset (seek pointer) "normally" i.e writes at current offset and increments by number of written bytes (in our case 1).
Writes are only permitted to cells on the grid (further explained under lseek), if offset doesn't match a cell - return an error (EPERM).

lseek - Sets the seek point to the given cell, and should take a number between 0 and 511 representing the coordinate.
The input number 0 should correspond to (0,0), 1 to (0,1), and so on. So 511 corresponds to (15,31), and for example 35 corresponds to (1,3).
The whence argument should be used as usual (SEEK_SET matches cell (0,0)).
If the input number is not in the permitted range return an error (EPERM) and don't change offset.
Return value in case of success: current file offset from (0,0) (note that this is a non-negative integer).

ioctl - Op 0 should receive another printable ascii (single char in the range  0x21-0x7e) as argument that changes the live cell character to it.
If no valid char was received an error should be returned (EINVAL).
Op 1 performs a "tick", meaning that it calculates the next state of the grid according to the rules of the game.
Other ops should return an error (EPERM).
Relevant macros:
1) _IO(type,0)
2) _IOW(type,1,char)

close - Should reset the grid, and allow a new grid to be opened. See man close(2) for possible errors.
